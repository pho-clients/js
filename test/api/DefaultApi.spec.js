/**
 * Social Graph API
 * Pho Networks REST API
 *
 * OpenAPI spec version: 1.1.1
 * Contact: emre@phonetworks.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.phonetworks);
  }
}(this, function(expect, phonetworks) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new phonetworks.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addAttribute', function() {
      it('should call addAttribute successfully', function(done) {
        //uncomment below and update the code to test addAttribute
        //instance.addAttribute(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delAttribute', function() {
      it('should call delAttribute successfully', function(done) {
        //uncomment below and update the code to test delAttribute
        //instance.delAttribute(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delEntity', function() {
      it('should call delEntity successfully', function(done) {
        //uncomment below and update the code to test delEntity
        //instance.delEntity(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllEdges', function() {
      it('should call getAllEdges successfully', function(done) {
        //uncomment below and update the code to test getAllEdges
        //instance.getAllEdges(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttribute', function() {
      it('should call getAttribute successfully', function(done) {
        //uncomment below and update the code to test getAttribute
        //instance.getAttribute(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttributes', function() {
      it('should call getAttributes successfully', function(done) {
        //uncomment below and update the code to test getAttributes
        //instance.getAttributes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdge', function() {
      it('should call getEdge successfully', function(done) {
        //uncomment below and update the code to test getEdge
        //instance.getEdge(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeGetters', function() {
      it('should call getEdgeGetters successfully', function(done) {
        //uncomment below and update the code to test getEdgeGetters
        //instance.getEdgeGetters(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeSetters', function() {
      it('should call getEdgeSetters successfully', function(done) {
        //uncomment below and update the code to test getEdgeSetters
        //instance.getEdgeSetters(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFounder', function() {
      it('should call getFounder successfully', function(done) {
        //uncomment below and update the code to test getFounder
        //instance.getFounder(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGraph', function() {
      it('should call getGraph successfully', function(done) {
        //uncomment below and update the code to test getGraph
        //instance.getGraph(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIncomingEdges', function() {
      it('should call getIncomingEdges successfully', function(done) {
        //uncomment below and update the code to test getIncomingEdges
        //instance.getIncomingEdges(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNode', function() {
      it('should call getNode successfully', function(done) {
        //uncomment below and update the code to test getNode
        //instance.getNode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNodeEdge', function() {
      it('should call getNodeEdge successfully', function(done) {
        //uncomment below and update the code to test getNodeEdge
        //instance.getNodeEdge(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutgoingEdges', function() {
      it('should call getOutgoingEdges successfully', function(done) {
        //uncomment below and update the code to test getOutgoingEdges
        //instance.getOutgoingEdges(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSpace', function() {
      it('should call getSpace successfully', function(done) {
        //uncomment below and update the code to test getSpace
        //instance.getSpace(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getType', function() {
      it('should call getType successfully', function(done) {
        //uncomment below and update the code to test getType
        //instance.getType(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('makeActor', function() {
      it('should call makeActor successfully', function(done) {
        //uncomment below and update the code to test makeActor
        //instance.makeActor(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('makeEdge', function() {
      it('should call makeEdge successfully', function(done) {
        //uncomment below and update the code to test makeEdge
        //instance.makeEdge(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAttribute', function() {
      it('should call setAttribute successfully', function(done) {
        //uncomment below and update the code to test setAttribute
        //instance.setAttribute(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
